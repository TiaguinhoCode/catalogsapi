// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id         String    @id @default(uuid())
  name       String
  surname    String
  photo      String?
  email      String
  password   String
  phone      String
  cep        String
  role       String
  is_active  Boolean   @default(true)
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  @@map("user")
}

model Banner {
  id         String    @id @default(uuid())
  image_url  String
  product_id String
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  product Product @relation(fields: [product_id], references: [id])

  @@map("banner")
}

model Category {
  id         String    @id @default(uuid())
  name       String
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())
  Product    Product[]

  @@map("category")
}

model Product {
  id                  String    @id @default(uuid())
  name                String
  description         String?
  price               Decimal
  is_active           Boolean   @default(true)
  promotion           Boolean   @default(false)
  category_id         String
  discount_price      Decimal?
  discount_percentage Decimal?
  created_at          DateTime? @default(now())
  updated_at          DateTime? @default(now())

  category Category @relation(fields: [category_id], references: [id])
  Banner   Banner[]
  Item     Item[]

  @@map("product")
}

model Status {
  id         String    @id @default(uuid())
  name       String
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())
  Order      Order[]

  @@map("status")
}

model Order {
  id         String    @id @default(uuid())
  status_id  String
  client     String
  table      Int
  created_at DateTime? @default(now())
  updated_at DateTime? @default(now())

  status Status @relation(fields: [status_id], references: [id])
  Items  Item[]

  @@map("order")
}

model Item {
  id         String @id @default(uuid())
  order_id   String
  product_id String
  quantity   Int

  order   Order   @relation(fields: [order_id], references: [id])
  product Product @relation(fields: [product_id], references: [id])

  @@map("item")
}
